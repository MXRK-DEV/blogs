(()=>{var e={};e.id=324,e.ids=[324],e.modules={6037:e=>{"use strict";e.exports=require("mongoose")},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},8887:(e,s,t)=>{"use strict";t.r(s),t.d(s,{patchFetch:()=>R,routeModule:()=>y,serverHooks:()=>N,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>x});var r={};t.r(r),t.d(r,{DELETE:()=>m,GET:()=>g,PATCH:()=>w,POST:()=>l});var n=t(2706),a=t(8203),i=t(5994),u=t(2545),o=t(2319),d=t(9187),p=t(6037);let c=p.Types.ObjectId,g=async()=>{try{await (0,u.A)();let e=await o.A.find();return new d.NextResponse(JSON.stringify(e),{status:200})}catch(e){return new d.NextResponse("Error in fetching users"+e.message,{status:500})}},l=async e=>{try{let s=await e.json();await (0,u.A)();let t=new o.A(s);return await t.save(),new d.NextResponse(JSON.stringify({message:"User is created",user:t}),{status:200})}catch(e){return new d.NextResponse("Error in creating user"+e.message,{status:500})}},w=async e=>{try{let{userId:s,newUsername:t}=await e.json();if(await (0,u.A)(),!s||!t)return new d.NextResponse(JSON.stringify({message:"ID or new username not found"}),{status:400});if(!p.Types.ObjectId.isValid(s))return new d.NextResponse(JSON.stringify({message:"Invalid User id"}),{status:400});let r=await o.A.findOneAndUpdate({_id:new c(s)},{username:t},{new:!0});if(!r)return new d.NextResponse(JSON.stringify({message:"User not found in the database"}),{status:400});return new d.NextResponse(JSON.stringify({message:"User is updated",user:r}),{status:200})}catch(e){return new d.NextResponse("Error in updating user"+e.message,{status:500})}},m=async e=>{try{let{searchParams:s}=new URL(e.url),t=s.get("userId");if(!t)return new d.NextResponse(JSON.stringify({message:"ID not found"}),{status:400});if(!p.Types.ObjectId.isValid(t))return new d.NextResponse(JSON.stringify({message:"Invalid User id"}),{status:400});await (0,u.A)();let r=await o.A.findByIdAndDelete(new p.Types.ObjectId(t));if(!r)return new d.NextResponse(JSON.stringify({message:"User not found in the database"}),{status:400});return new d.NextResponse(JSON.stringify({message:"User is deleted",user:r}),{status:200})}catch(e){return new d.NextResponse("Error in deleting user"+e.message,{status:500})}},y=new n.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/(auth)/users/route",pathname:"/api/users",filename:"route",bundlePath:"app/api/(auth)/users/route"},resolvedPagePath:"C:\\Users\\MARK\\Desktop\\PROJECTS\\JAVASCRIPT\\blogs\\app\\api\\(auth)\\users\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:f,workUnitAsyncStorage:x,serverHooks:N}=y;function R(){return(0,i.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:x})}},6487:()=>{},8335:()=>{},2545:(e,s,t)=>{"use strict";t.d(s,{A:()=>i});var r=t(6037),n=t.n(r);let a=process.env.MONGODB_URI,i=async()=>{let e=n().connection.readyState;if(1===e){console.log("Already connected");return}if(2===e){console.log("Connecting...");return}try{n().connect(a,{dbName:"BLOGS",bufferCommands:!0}),console.log("Connected")}catch(e){throw console.log("Error: ",e),Error("Error: ",e)}}},2319:(e,s,t)=>{"use strict";t.d(s,{A:()=>a});var r=t(6037);let n=new r.Schema({email:{type:"string",required:!0,unique:!0},username:{type:"string",required:!0,unique:!0},password:{type:"string",required:!0}},{timestamps:!0}),a=r.models.User||(0,r.model)("User",n)}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[638,452],()=>t(8887));module.exports=r})();