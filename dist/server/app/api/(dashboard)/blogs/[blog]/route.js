(()=>{var e={};e.id=84,e.ids=[84],e.modules={6037:e=>{"use strict";e.exports=require("mongoose")},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},1763:(e,s,t)=>{"use strict";t.r(s),t.d(s,{patchFetch:()=>b,routeModule:()=>f,serverHooks:()=>x,workAsyncStorage:()=>w,workUnitAsyncStorage:()=>N});var r={};t.r(r),t.d(r,{DELETE:()=>m,GET:()=>c,PATCH:()=>y});var n=t(2706),i=t(8203),a=t(5994),o=t(9187),d=t(2545),u=t(6288),g=t(6037),l=t(2319),p=t(5392);let c=async(e,s)=>{let t=s.params.blog;try{let{searchParams:s}=new URL(e.url),r=s.get("userId"),n=s.get("categoryId");if(!r||!g.Types.ObjectId.isValid(r))return new o.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!n||!g.Types.ObjectId.isValid(n))return new o.NextResponse(JSON.stringify({message:"Invalid or missing categoryId"}),{status:400});if(!t||!g.Types.ObjectId.isValid(t))return new o.NextResponse(JSON.stringify({message:"Invalid or missing blogId"}),{status:400});if(await (0,d.A)(),!await l.A.findById(r))return new o.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!await p.A.findById(n))return new o.NextResponse(JSON.stringify({message:"Category not found"}),{status:404});let i=await u.A.findOne({_id:t,user:r,category:n});if(!i)return new o.NextResponse(JSON.stringify({message:"Blog not found"}),{status:404});return new o.NextResponse(JSON.stringify({blog:i}),{status:200})}catch(e){return new o.NextResponse("Error in fetching a blog"+e.message,{status:500})}},y=async(e,s)=>{let t=s.params.blog;try{let{title:s,description:r}=await e.json(),{searchParams:n}=new URL(e.url),i=n.get("userId");if(!i||!g.Types.ObjectId.isValid(i))return new o.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!t||!g.Types.ObjectId.isValid(t))return new o.NextResponse(JSON.stringify({message:"Invalid or missing blogId"}),{status:400});if(await (0,d.A)(),!await l.A.findById(i))return new o.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!await u.A.findOne({_id:t,user:i}))return new o.NextResponse(JSON.stringify({message:"Blog not found"}),{status:404});let a=await u.A.findByIdAndUpdate(t,{title:s,description:r},{new:!0});return new o.NextResponse(JSON.stringify({message:"Blog updated",blog:a}),{status:200})}catch(e){return new o.NextResponse("Error updating blog"+e.message,{status:500})}},m=async(e,s)=>{let t=s.params.blog;try{let{searchParams:s}=new URL(e.url),r=s.get("userId");if(!r||!g.Types.ObjectId.isValid(r))return new o.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!t||!g.Types.ObjectId.isValid(t))return new o.NextResponse(JSON.stringify({message:"Invalid or missing blogId"}),{status:400});if(await (0,d.A)(),!await l.A.findById(r))return new o.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!await u.A.findOne({_id:t,user:r}))return new o.NextResponse(JSON.stringify({message:"Blog not found"}),{status:404});return await u.A.findByIdAndDelete(t),new o.NextResponse(JSON.stringify({message:"Blog is deleted"}),{status:200})}catch(e){return new o.NextResponse("Error in deleting blog"+e.message,{status:500})}},f=new n.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/(dashboard)/blogs/[blog]/route",pathname:"/api/blogs/[blog]",filename:"route",bundlePath:"app/api/(dashboard)/blogs/[blog]/route"},resolvedPagePath:"C:\\Users\\MARK\\Desktop\\PROJECTS\\JAVASCRIPT\\blogs\\app\\api\\(dashboard)\\blogs\\[blog]\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:w,workUnitAsyncStorage:N,serverHooks:x}=f;function b(){return(0,a.patchFetch)({workAsyncStorage:w,workUnitAsyncStorage:N})}},6487:()=>{},8335:()=>{},2545:(e,s,t)=>{"use strict";t.d(s,{A:()=>a});var r=t(6037),n=t.n(r);let i=process.env.MONGODB_URI,a=async()=>{let e=n().connection.readyState;if(1===e){console.log("Already connected");return}if(2===e){console.log("Connecting...");return}try{n().connect(i,{dbName:"BLOGS",bufferCommands:!0}),console.log("Connected")}catch(e){throw console.log("Error: ",e),Error("Error: ",e)}}},6288:(e,s,t)=>{"use strict";t.d(s,{A:()=>i});var r=t(6037);let n=new r.Schema({title:{type:"string",required:!0},description:{type:"string"},user:{type:r.Schema.Types.ObjectId,ref:"User"},category:{type:r.Schema.Types.ObjectId,ref:"Category"}},{timestamps:!0}),i=r.models.Blog||(0,r.model)("Blog",n)},5392:(e,s,t)=>{"use strict";t.d(s,{A:()=>i});var r=t(6037);let n=new r.Schema({title:{type:"string",required:!0},user:{type:r.Schema.Types.ObjectId,ref:"User"}},{timestamps:!0}),i=r.models.Category||(0,r.model)("Category",n)},2319:(e,s,t)=>{"use strict";t.d(s,{A:()=>i});var r=t(6037);let n=new r.Schema({email:{type:"string",required:!0,unique:!0},username:{type:"string",required:!0,unique:!0},password:{type:"string",required:!0}},{timestamps:!0}),i=r.models.User||(0,r.model)("User",n)}};var s=require("../../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[638,452],()=>t(1763));module.exports=r})();