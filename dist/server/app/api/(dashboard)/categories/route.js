(()=>{var e={};e.id=226,e.ids=[226],e.modules={6037:e=>{"use strict";e.exports=require("mongoose")},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},7225:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>x,routeModule:()=>y,serverHooks:()=>f,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>w});var s={};r.r(s),r.d(s,{GET:()=>g,POST:()=>l});var n=r(2706),a=r(8203),i=r(5994),o=r(2545),u=r(2319),d=r(5392),c=r(9187),p=r(6037);let g=async e=>{try{let{searchParams:t}=new URL(e.url),r=t.get("userId");if(!r||!p.Types.ObjectId.isValid(r))return new c.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(await (0,o.A)(),!await u.A.findById(r))return new c.NextResponse(JSON.stringify({message:"User not found in the database"}),{status:400});let s=await d.A.find({user:new p.Types.ObjectId(r)});return new c.NextResponse(JSON.stringify(s),{status:200})}catch(e){return new c.NextResponse("Error in fetching categories"+e.message,{status:500})}},l=async e=>{try{let{searchParams:t}=new URL(e.url),r=t.get("userId"),{title:s}=await e.json();if(!r||!p.Types.ObjectId.isValid(r))return new c.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(await (0,o.A)(),!await u.A.findById(r))return new c.NextResponse(JSON.stringify({message:"User not found"}),{status:404});let n=new d.A({title:s,user:new p.Types.ObjectId(r)});return await n.save(),new c.NextResponse(JSON.stringify({message:"Category is created",category:n}),{status:200})}catch(e){return new c.NextResponse("Error in creating category"+e.message,{status:500})}},y=new n.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/(dashboard)/categories/route",pathname:"/api/categories",filename:"route",bundlePath:"app/api/(dashboard)/categories/route"},resolvedPagePath:"C:\\Users\\MARK\\Desktop\\PROJECTS\\JAVASCRIPT\\blogs\\app\\api\\(dashboard)\\categories\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:m,workUnitAsyncStorage:w,serverHooks:f}=y;function x(){return(0,i.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:w})}},6487:()=>{},8335:()=>{},2545:(e,t,r)=>{"use strict";r.d(t,{A:()=>i});var s=r(6037),n=r.n(s);let a=process.env.MONGODB_URI,i=async()=>{let e=n().connection.readyState;if(1===e){console.log("Already connected");return}if(2===e){console.log("Connecting...");return}try{n().connect(a,{dbName:"BLOGS",bufferCommands:!0}),console.log("Connected")}catch(e){throw console.log("Error: ",e),Error("Error: ",e)}}},5392:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var s=r(6037);let n=new s.Schema({title:{type:"string",required:!0},user:{type:s.Schema.Types.ObjectId,ref:"User"}},{timestamps:!0}),a=s.models.Category||(0,s.model)("Category",n)},2319:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var s=r(6037);let n=new s.Schema({email:{type:"string",required:!0,unique:!0},username:{type:"string",required:!0,unique:!0},password:{type:"string",required:!0}},{timestamps:!0}),a=s.models.User||(0,s.model)("User",n)}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[638,452],()=>r(7225));module.exports=s})();